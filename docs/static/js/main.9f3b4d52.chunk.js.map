{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GirExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","imagenes","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,uBAAMC,SAbS,SAACC,GACfA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAACS,GAAD,OAASP,GAAT,mBAAuBO,OACtCN,EAAc,MAQlB,UAEI,6BAAKD,IACL,uBACIQ,KAAK,OACLC,MAAOT,EACPU,SAvBU,SAACP,GACnBF,EAAcE,EAAEQ,OAAOF,c,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGbC,EAHa,iDAGmCC,UAAUH,GAH7C,+DAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXnB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAnBJ,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAGlC,OADAc,QAAQC,IAAIN,EAAGC,EAAMV,GAEjB,sBAAKgB,UAAU,0CAAf,UAEI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCJHS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAGxB,ECL0B,SAACA,GAC3B,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNe,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbFC,qBAAU,WACRT,QAAQC,IAAI,eAAejB,GAC3BD,EAAQC,GACP0B,MAAK,SAAAC,GAAI,OAEXH,EAAS,CACNjB,KAAKoB,EACLL,SAAQ,SAKV,CAACtB,IACMuB,EDdwBK,CAAa5B,GAAhC6B,EAAZ,EAAOtB,KAAce,EAArB,EAAqBA,QAgCrB,OA/BAN,QAAQC,IAAIY,EAASP,GAgCnB,qCACE,oBAAIJ,UAAU,yCAAd,SAAwDlB,IACvDsB,GAAW,mBAAGJ,UAAU,wCAAb,wBACZ,qBAAKA,UAAU,YAAf,SACGW,EAASpB,KAAI,SAACC,GAAD,OACZ,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEzCnBmB,EAAe,WAGxB,MAAoC5C,mBAAS,CAAC,WAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAMA,OACI,qCACI,8CACA,uBACE,cAAC,EAAD,CAAaA,cAAeA,IAI9B,6BAEQ8C,EAAWtB,KACP,SAAAT,GAAQ,OACJ,cAAC,EAAD,CAEAA,SAAUA,GADLA,YCtBjCgC,IAASC,OAEP,cAAC,EAAD,IAEAC,SAASC,eAAe,W","file":"static/js/main.9f3b4d52.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport propTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n     const handleOnCahnge=(e) => {\r\n        setinputValue(e.target.value)\r\n     }\r\n\r\n     const hanleSubmit=(e)=>{\r\n         e.preventDefault();\r\n         \r\n         if(inputValue.trim().length > 2 ){\r\n            setCategories( (cats)=>[inputValue,...cats] );\r\n            setinputValue('');\r\n\r\n         }\r\n        \r\n        // console.log('subtmit hecho');\r\n     }\r\n\r\n    return (\r\n        <form onSubmit={hanleSubmit}>\r\n            \r\n            <h2>{inputValue}</h2>\r\n            < input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleOnCahnge}\r\n            />\r\n         </form>\r\n    )\r\n}\r\nAddCategory.propTypes={\r\n    setCategories: propTypes.func.isRequired\r\n}\r\n","export const getGifs = async (category) => {\r\n   \r\n  \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category) }&limit=10&api_key=fOTjEMmJVbEQ9sACdpGjBvQr5NxJ5gyn`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n \r\n    return gifs\r\n  }","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n\r\n    console.log(id,title,url);\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn \">\r\n          \r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n \r\n  const {data:imagenes,loading}= useFetchGifs(category);\r\n  console.log(imagenes,loading);\r\n /*  const [imagenes, setimagenes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getGifs(category)\r\n    .then(img=>setimagenes(img))\r\n\r\n  }, [category])\r\n */\r\n\r\n\r\n\r\n /*  const getGifs = async () => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category) }&limit=10&api_key=fOTjEMmJVbEQ9sACdpGjBvQr5NxJ5gyn`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n    console.log('test',category);\r\n    console.log(gifs);\r\n   \r\n    setimagenes(gifs);\r\n  }; */\r\n\r\n  \r\n  return (\r\n    <>\r\n      <h3 className=\"card animate__animated animate__fadeIn\">{category}</h3>\r\n      {loading && <p className=\"card animate__animated animate__flash\">Loading...</p>}\r\n      <div className=\"card-grid\">\r\n        {imagenes.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState,useEffect } from \"react\";\r\nimport {getGifs}  from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n \r\nuseEffect(()=>{\r\n  console.log('Categorias--',category);\r\n  getGifs(category)\r\n  .then(imgs=>\r\n    \r\n setstate({\r\n    data:imgs,\r\n    loading:false\r\n  })\r\n   \r\n   );\r\n\r\n},[category])\r\n  return state;\r\n};\r\n","import React,{useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory'; \r\nimport {GifGrid} from './components/GifGrid';\r\n\r\n\r\nexport const GitExpertApp = () => {\r\n\r\n    //const categories = ['onepunk', 'samuray x', 'Dregon ball z '];\r\n    const [categories, setCategories] = useState(['batman']);\r\n\r\n    /* const handleAdd=()=>{\r\n        setcategories((c)=>[...c,'Batman']);\r\n    } */\r\n\r\n    return (\r\n        <>\r\n            <h2>GitExpertApp</h2>\r\n            <hr />\r\n              <AddCategory setCategories={setCategories} />  \r\n\r\n             \r\n\r\n            <ol>\r\n                {\r\n                    categories.map(\r\n                        category => (\r\n                            <GifGrid\r\n                            key={category}  \r\n                            category={category} \r\n                        \r\n                             />\r\n\r\n                        )\r\n                       // <li key={categorie} >{categorie}</li>\r\n                    )\r\n                }\r\n            </ol>\r\n\r\n            {/* <button onClick={handleAdd} >Agregar</button> */}\r\n\r\n        </>\r\n\r\n    )\r\n\r\n\r\n};\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GitExpertApp} from './GirExpertApp';\n\nReactDOM.render(\n\n  <GitExpertApp  />,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}